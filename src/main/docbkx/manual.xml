<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="http://www.oasis-open.org/docbook/xml/5.0/rng/docbook.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
    <info>
        <title>TigerModules</title>
        <subtitle>User's Guide</subtitle>
        <authorgroup>
            <author>
                <personname>
                    <firstname>Florian</firstname>
                    <surname>Zipser</surname>
                </personname>
                <email>saltnpepper@lists.hu-berlin.de</email>
            </author>
            <author>
                <orgname xml:id="org1">INRIA</orgname>
            </author>
            <author>
                <orgname xml:id="org2">SFB 632 Information Structure / D1 Linguistic
                    Database</orgname>
            </author>
            <author>
                <orgname xml:id="org3">Humboldt-Universität zu Berlin</orgname>
            </author>
            <author>
                <orgname xml:id="org4">Universität Potsdam</orgname>
            </author>
        </authorgroup>
        <copyright>
            <year>2009</year>
            <holder><xref linkend="org1"/>, <xref linkend="org2"/>, <xref linkend="org3"/>, <xref
                    linkend="org1"/>,<xref linkend="org4"/>, All rights reserved.</holder>
        </copyright>
        <releaseinfo>Version ${project.version}</releaseinfo>
    </info>
    <preface>
        <title>Foreword</title>
        <para>The intention of this document is first to give a guide to the user of how to use the
            here mentioned pepper modules and how to utilize a mapping performed by them. Second
            this document shall give a closer view of the details of such a mapping in a declarative
            way, to give the user a chance to understand how specific data will be mapped by the
            presented pepper modules.</para>
    </preface>
    <chapter>
        <title>Overview</title>
        <para>This project contains the pepper modules listed in <xref linkend="table_overview"/>. A
            single module can be identified via its coordinates (module-name, format-name,
            format-version) also given in <xref linkend="table_overview"/>. You can use these
            coordinates in a pepper workflow description file to identify the modules in a pepper
            conversion process. A description of how to model a workflow description file can be
            found under https://korpling.german.hu-berlin.de/saltnpepper/.</para>
        
        <table xml:id="table_overview" frame="all">
            <title>pepper modules contained in this project</title>
            <tgroup cols="3" align="left" colsep="1" rowsep="1">
                <thead>
                    <row>
                        <entry>Name of pepper module</entry>
                        <entry>Type of pepper module</entry>
                        <entry>Format (if module is im- or exporter)</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry><xref linkend="tiger_importer" endterm="tiger_importer_name"
                            /></entry>
                        <entry>importer</entry>
                        <entry>TigerXML 1.0, &lt;tiger2/> 2.0.5</entry>
                    </row>
                    <!-- 
                    <row>
                        <entry><xref linkend="treetagger_exporter"
                                endterm="treetagger_exporter_name"/></entry>
                        <entry>exporter</entry>
                        <entry>TigerXML 1.0, &lt;tiger2/> 2.0.5</entry>
                    </row>
                     -->
                </tbody>
            </tgroup>
        </table>
        <para> The here provided importers <!--and exporters--> base on the &lt;tiger2/>-api (see:
            https://korpling.german.hu-berlin.de/p/projects/tiger2-api). This api enables the im-
            and export from and to the TigerXML format as well as the &lt;tiger2/>-format. </para>
        <para>
            <figure><title>&lt;tiger2/>-api</title>
                <mediaobject>
                    <imageobject>
                        <imagedata width="450pt" fileref="images/tiger2.png"/>
                    </imageobject>
                    <textobject><phrase>EMF description of the &lt;tiger2/>-api</phrase></textobject>
                </mediaobject>
            </figure>
        </para>
    </chapter>
    <!-- 
    <chapter xml:id="changes">
        <title>Changes</title>
        <para> This chapter contains the changes in version ${project.version} compared to the
            previous version. </para>
        <section>
            <title><xref linkend="tiger_importer_name"/></title>
            <itemizedlist spacing="compact">
                <listitem>
                    <para>Added new property XXX to importer.</para>
                </listitem>
            </itemizedlist>
        </section>
    </chapter>
     -->
    <chapter xml:id="tiger_importer">
        <title xml:id="tiger_importer_name">TigerImporter</title>
        <para>The TigerImporter is able to import data comming from the TigerXML format and from the
            &lt;tiger2/>-format as well. Therefore, the here described mapping only covers the
            mapping between the &lt;tiger2/>-api and Salt.</para>
        <sect1>
            <title>Mapping to Salt</title>
            <para>The mapping of the document-structure of a <classname>Document</classname> in
                &lt;tiger2/> to a <classname>SDocument</classname> in Salt is very straight forward.</para>
            <sect2>
                <title>metadata</title>
                <para>Metadata in the &lt;tiger2/>-model are all fields of the object
                        <classname>Meta</classname>. These are for instance
                        <classname>name</classname>, <classname>author</classname> and
                        <classname>date</classname>. Each of these fields is mapped to an own
                    metadata objects in Salt called <classname>SMetaAnnotation</classname>.  The
                    name of the metadate in the  &lt;tiger2/>-model is mapped to the field
                        <classname>SMetadata.sName</classname> and its value values is mapped to the
                        <classname>SMetadata.sValue</classname>. All
                        <classname>SMetaAnnotation</classname> objects are added to the
                        <classname>SDocument</classname> object representing the
                        <classname>Corpus</classname> object in the &lt;tiger2/>-model</para>
            </sect2>
            <sect2>
                <title>text, token and terminal</title>
                <para>
                    A terminal node (<classname>Terminal</classname>) is mapped to a
                    <classname>SToken</classname> node. The overlaped text is mapped to a
                    <classname>STextualDS</classname> object. During the mapping, only one
                    <classname>STextualDS</classname> object is created for the entire document.
                    Neither in the TigerXML format nor in the &lt;tiger2/> format the primary text can
                    not be recreated, since only tokens are kept, but no information about separators
                    like whitespaces. Therefore the importer provides a property (<xref linkend="prop_prop3" endterm="importer_prop3_title"
                    />) to customize a separator between
                    tokens. The default separator is the blank character.</para><para>Imagine two terminals covering the text "a" and "sample", the default mapping will produce the
                        <classname>sText</classname> value "a sample".</para>
            </sect2>
            <sect2>
                <title>non-terminal</title>
                <para>A non-terminal node (<classname>NonTerminal</classname>) is mapped to a
                        <classname>SStructure</classname> node.</para>
            </sect2>
            <sect2>
                <title>edges</title>
                <para> The descision to which class of an <classname>SRelation</classname> an edge
                    is mapped is rule based, depending on the class of source or the target node of
                    the edge. <itemizedlist>
                        <listitem>
                            <para>when source of <classname>Edge</classname> object is a
                                    <classname>SToken</classname> object, than the
                                    <classname>Edge</classname> is mapped to a
                                    <classname>SPointingRelation</classname> object</para>
                        </listitem>
                        <listitem>
                            <para>when <classname>Edge.source</classname> is a
                                    <classname>SSpan</classname> object and
                                    <classname>Edge.target</classname> is a
                                    <classname>SToken</classname> object , than the
                                    <classname>Edge</classname> is mapped to a
                                    <classname>SSpanningRelation</classname> object</para>
                        </listitem>
                        <listitem>
                            <para>when <classname>Edge.source</classname> is a
                                    <classname>SStructure</classname> object, than the
                                    <classname>Edge</classname> is mapped to a
                                    <classname>SDominanceRelation</classname> object</para>
                        </listitem>
                        <listitem>
                            <para><classname>SPointingRelation</classname> otherwise</para>
                        </listitem>
                    </itemizedlist>
                </para>
            </sect2>
            <sect2>
                <title>annotations</title>
                <para>Annotations in general (represented by a <classname>Annotation</classname>
                    object in the &lt;tiger2/>-api) are mapped to a
                        <classname>SAnnotation</classname> object, where the
                        <classname>SAnnotation.sName</classname> is mapped to the
                        <classname>Annotation.name</classname> and the
                        <classname>Annotation.value</classname> is mapped to the
                        <classname>SAnnotation.sValue</classname> field. An Annotation object can
                    belong to either a <classname>Terminal</classname>, a
                        <classname>NonTerminal</classname> or an <classname>Edge</classname> object
                    and therefore is referred to the corresponding <classname>SNode</classname> or
                        <classname>SRelation</classname> object in Salt. To adopt the mapping with
                    renaming name of an annotation, you can use the property <xref
                        linkend="prop_prop5" endterm="importer_prop5_title"/>.</para>
            </sect2>
            <sect2>
                <title>segments</title>
                <para>In the default case, <classname>Segment</classname> objects are ignored and
                    not mapped to Salt. To adopt this behaviour you can use the property <xref linkend="prop_prop1" endterm="importer_prop1_title"
                    />.</para>
            </sect2>
        </sect1>
        <sect1>
            <title>Properties</title>
            <para> The table <xref linkend="importer_prop_overview"/> contains an overview of all
                usable properties to customize the behaviour of this pepper module. The following
                section contains a brief description to each single property and describes the
                resulting differences in the mapping to the Salt model.</para>
            <table xml:id="importer_prop_overview" frame="all">
                <title>properties to customize importer behaviour</title>
                <tgroup cols="4" align="left" colsep="1" rowsep="1">
                    <colspec colnum="1" colname="c1" colwidth="6*"/>
                    <colspec colnum="2" colname="c2" colwidth="1*"/>
                    <colspec colnum="3" colname="c3" colwidth="1.94*"/>
                    <colspec colnum="4" colname="c4" colwidth="1*"/>
                    <thead>
                        <row>
                            <entry>Name of property</entry>
                            <entry>Type of property</entry>
                            <entry>optional/ mandatory</entry>
                            <entry>default value</entry>
                        </row>
                    </thead>
                    <tbody>
                        <row>
                            <entry><xref linkend="prop_prop1" endterm="importer_prop1_title"
                                /></entry>
                            <entry>Boolean</entry>
                            <entry>optional</entry>
                            <entry>false</entry>
                        </row>
                        <row>
                            <entry><xref linkend="prop_prop2" endterm="importer_prop2_title"
                                /></entry>
                            <entry>String</entry>
                            <entry>optional</entry>
                            <entry>whitespace</entry>
                        </row>
                        <row>
                            <entry><xref linkend="prop_prop3" endterm="importer_prop3_title"
                                /></entry>
                            <entry>String</entry>
                            <entry>optional</entry>
                            <entry>--</entry>
                        </row>
                        <row>
                            <entry><xref linkend="prop_prop4" endterm="importer_prop4_title"
                                /></entry>
                            <entry>String</entry>
                            <entry>optional</entry>
                            <entry>--</entry>
                        </row>
                        <row>
                            <entry><xref linkend="prop_prop5" endterm="importer_prop5_title"
                            /></entry>
                            <entry>String</entry>
                            <entry>optional</entry>
                            <entry>--</entry>
                        </row>
                    </tbody>
                </tgroup>
            </table>
            <sect2 xml:id="prop_prop1">
                <title xml:id="importer_prop1_title">pepperModules.tigerModules.importer.createSSpan4Segment</title>
                <para>This flag determines if a <classname>SSpan</classname> object shall be created
                    for each segment. Must be mappable to a Boolean value.</para>
            </sect2>
            <sect2 xml:id="prop_prop2">
                <title xml:id="importer_prop2_title">pepperModules.tigerModules.importer.map</title>
                <para>Property to determine, which Egde type shall be mapped to which kind of
                        <classname>SRelation</classname>.This is just a prefix of the real property,
                    which has a suffix specifying the Edge type. For instance
                    pepperModules.tigerModules.importer.map.dep or
                    pepperModules.tigerModules.importer.map.prim.</para>
            </sect2>
            <sect2 xml:id="prop_prop3">
                <title xml:id="importer_prop3_title">pepperModules.tigerModules.importer.separator</title>
                <para>Determines the separator between terminal nodes. The default separator is ' '.</para>
            </sect2>
            <sect2 xml:id="prop_prop4">
                <title xml:id="importer_prop4_title"
                    >pepperModules.tigerModules.importer.edge.type</title>
                <para>Gives a renaming table for the sType of a SRelation. The syntax of defining such a table is 'OLDNAME=NEWNAME (,OLDNAME=NEWNAME)*', for instance the property value prim=edge, sec=secedge, will rename all sType values from 'prim' to edge and 'sec' to secedge.</para>
            </sect2>
            <sect2 xml:id="prop_prop5">
                <title xml:id="importer_prop5_title"
                    >pepperModules.tigerModules.importer.annotation.name</title>
                <para>Gives a renaming table for the name of an annotation, or more specific, which value the sName of the SAnnotation object shall get. The syntax of defining such a table is 'OLDNAME=NEWNAME (,OLDNAME=NEWNAME)*', for instance the property value label=func, will rename all sName values from 'label' to 'func'."</para>
            </sect2>
        </sect1>
    </chapter>
</book>
